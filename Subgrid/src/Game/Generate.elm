module Game.Generate exposing (..)

import Game exposing (Game)
import Level exposing (Level, LevelAmount)
import Stage
import StaticArray exposing (StaticArray)


levels : StaticArray LevelAmount (Int -> Maybe Game)
levels =
    ( \stage ->
        case stage of
            1 ->
                --simplest pattern
                Stage.parse
                    [ "â¬›ğŸ”˜â¬›â¬›ğŸ”˜â¬›"
                    , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬›"
                    , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                    , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                    , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬›"
                    , "â¬›â¬›â¬›â¬›â¬›â¬›"
                    ]
                    |> Game.fromStage
                    |> Just

            _ ->
                Nothing
    , [ \stage ->
            case stage of
                1 ->
                    --again a curve
                    --no alternative solutions
                    Stage.parse
                        [ "â¬›ğŸŸ¥â¬›â¬›ğŸ”˜â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                        , "â¬›â¬›â¬›â¬›ğŸŸ¥â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    --only way how to make a straight with just a curve
                    --again no alternatives
                    Stage.parse
                        [ "â¬›â¬›â¬›â¬›â¬›â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›ğŸŸ¥â¬›â¬›ğŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing
      , \stage ->
            case stage of
                1 ->
                    --player learns that lasers will prefer straight lines
                    Stage.parse
                        [ "â¬›ğŸŸ¥â¬›â¬›ğŸ”˜â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                        , "â¬›â¬›â¬›â¬›ğŸŸ¥â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    --player is forced to cross lines
                    Stage.parse
                        [ "â¬›ğŸ”˜â¬›â¬›ğŸŸ¥â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›ğŸŸ¥â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                3 ->
                    --player will not be able to make a straight line
                    Stage.parse
                        [ "â¬›ğŸ”˜â¬›â¬›ğŸŸ¥â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›â¬›â¬›â¬›ğŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing
      , \stage ->
            case stage of
                3 ->
                    Stage.parse
                        [ "â¬›â¬›â¬›ğŸ”˜â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›ğŸŸ¥â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    Stage.parse
                        [ "â¬›â¬›ğŸŸ¥ğŸ”˜â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                1 ->
                    Stage.parse
                        [ "â¬›â¬›ğŸ”˜ğŸŸ¥â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                        , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›ğŸ”˜â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing
      , \stage ->
            case stage of
                1 ->
                    Stage.parse
                        [ "â¬›ğŸŸ¥â¬›â¬›ğŸŸ¥â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›ğŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    Stage.parse
                        [ "â¬›ğŸŸ¥â¬›â¬›ğŸŸ¥â¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing
      ]
    )
        |> StaticArray.fromList Level.maxLevel


new : { level : Level, stage : Int } -> Maybe Game
new args =
    levels
        |> StaticArray.get args.level
        |> (\fun -> fun args.stage)
