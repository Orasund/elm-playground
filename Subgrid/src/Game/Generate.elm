module Game.Generate exposing (..)

import Game exposing (Game)
import Level exposing (Level(..))
import Stage


new : { level : Level, stage : Int } -> Maybe Game
new args =
    case args.level of
        Level1 ->
            case args.stage of
                1 ->
                    --player learns that lasers will prefer straight lines
                    Stage.parse
                        [ "â¬›ðŸŸ¥â¬›â¬›ðŸ”˜â¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                        , "â¬›â¬›â¬›â¬›ðŸŸ¥â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    --player is forced to cross lines
                    Stage.parse
                        [ "â¬›ðŸ”˜â¬›â¬›ðŸŸ¥â¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œðŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›ðŸŸ¥â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                3 ->
                    --player will not be able to make a straight line
                    Stage.parse
                        [ "â¬›ðŸ”˜â¬›â¬›ðŸŸ¥â¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸŸ¥"
                        , "â¬›â¬›â¬›â¬›ðŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing

        Level2 ->
            case args.stage of
                3 ->
                    Stage.parse
                        [ "â¬›â¬›â¬›ðŸ”˜â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œðŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›ðŸŸ¥â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    Stage.parse
                        [ "â¬›â¬›ðŸŸ¥ðŸ”˜â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œðŸŸ¥"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                1 ->
                    Stage.parse
                        [ "â¬›â¬›ðŸ”˜ðŸŸ¥â¬›â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                        , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›ðŸ”˜â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing

        Level3 ->
            case args.stage of
                1 ->
                    Stage.parse
                        [ "â¬›ðŸŸ¥â¬›â¬›ðŸŸ¥â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›ðŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                2 ->
                    Stage.parse
                        [ "â¬›ðŸŸ¥â¬›â¬›ðŸŸ¥â¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›â¬›â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing

        Level4 ->
            case args.stage of
                1 ->
                    Stage.parse
                        [ "â¬›ðŸŸ¥â¬›â¬›ðŸŸ¥â¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                        , "â¬›â¬›â¬›â¬›ðŸ”˜â¬›"
                        ]
                        |> Game.fromStage
                        |> Just

                _ ->
                    Nothing
