module Game.Generate exposing (..)

import Game exposing (Game(..))
import Stage


fromId : Int -> Game
fromId stageId =
    let
        default =
            0
    in
    case stageId of
        4 ->
            Stage.parse
                [ "â¬›ðŸŸ¥â¬›â¬›ðŸŸ¥â¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›ðŸ”˜â¬›â¬›ðŸ”˜â¬›"
                ]
                |> Level2

        3 ->
            Stage.parse
                [ "â¬›â¬›â¬›â¬›â¬›â¬›"
                , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                , "â¬›ðŸ”˜â¬›â¬›ðŸŸ¥â¬›"
                ]
                |> Level1

        2 ->
            Stage.parse
                [ "â¬›ðŸŸ¥â¬›â¬›ðŸŸ¥â¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œðŸ”˜"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                , "â¬›ðŸ”˜â¬›â¬›â¬›â¬›"
                ]
                |> Level1

        0 ->
            Stage.parse
                [ "â¬›ðŸ”˜â¬›â¬›ðŸŸ¥â¬›"
                , "ðŸŸ¥â¬œâ¬œâ¬œâ¬œðŸ”˜"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ðŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›ðŸŸ¥â¬›â¬›â¬›â¬›"
                ]
                |> Level1

        _ ->
            fromId default
