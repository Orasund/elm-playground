module Gen.Enum.Natural exposing (..)

{-| Module generated by [Elm-Pen](https://orasund.github.io/elm-pen).

This module contains the Natural Enum.

    type Natural
        = Leaf
        | Stone
        | Wood
        | Fruit


# Basics

@docs Natural, asList, first, next, prev, last


# Converters

@docs toInt, fromInt, toString, fromString

-}

import Array exposing (Array)



-- This is a generated file. DO NOT CHANGE ANYTHING IN HERE.
-------------------------------------------------------------------------------
-- BASICS
-------------------------------------------------------------------------------


{-| Natural type.
-}
type Natural
    = Leaf
    | Stone
    | Wood
    | Fruit


{-| Lists all possible values of Natural

    asList : List Natural
    asList =
        [ Leaf
        , Stone
        , Wood
        , Fruit
        ]

-}
asList : List Natural
asList =
    [ Leaf
    , Stone
    , Wood
    , Fruit
    ]


{-| Get the first constructor of the Natural

    first : Natural
    first =
        Leaf

-}
first : Natural
first =
    Leaf


{-| Get the next Natural.
-}
next : Natural -> Natural
next natural =
    natural
        |> toInt
        |> (+) 1
        |> fromInt
        |> Maybe.withDefault Leaf


{-| Get the next Natural.
-}
prev : Natural -> Natural
prev natural =
    natural
        |> toInt
        |> (+) -1
        |> fromInt
        |> Maybe.withDefault Fruit


{-| Get the last constructor of the Natural

    last : Natural
    last =
        Fruit

-}
last : Natural
last =
    Fruit



-------------------------------------------------------------------------------
-- CONVERTERS
-------------------------------------------------------------------------------


{-| Convert `Natural` into `Int`.

    toInt : Natural -> Int
    toInt arg =
        case arg of
            Leaf ->
                0

            Stone ->
                1

            Wood ->
                2

            Fruit ->
                3

If you need to convert all values of Natural into ints, use `asList` instead.

    asList |> List.indexedMap (\i _ -> i)
        --> asList |> List.map toInt

-}
toInt : Natural -> Int
toInt natural =
    case natural of
        Leaf ->
            0

        Stone ->
            1

        Wood ->
            2

        Fruit ->
            3


{-| Convert `Int` into `Natural`

Returns `Nothing` if the values is out of bounds.

    fromInt : Int -> Maybe Natural
    fromInt int =
        case int of
            0 ->
                Just Leaf

            1 ->
                Just Stone

            2 ->
                Just Wood

            3 ->
                Just Fruit

            _ ->
                Nothing

-}
fromInt : Int -> Maybe Natural
fromInt int =
    case int of
        0 ->
            Just Leaf

        1 ->
            Just Stone

        2 ->
            Just Wood

        3 ->
            Just Fruit

        _ ->
            Nothing


{-| Convert Natural into String

    toString : Natural -> String
    toString arg =
        case arg of
            Leaf ->
                "Leaf"

            Stone ->
                "Stone"

            Wood ->
                "Wood"

            Fruit ->
                "Fruit"

-}
toString : Natural -> String
toString natural =
    case natural of
        Leaf ->
            "Leaf"

        Stone ->
            "Stone"

        Wood ->
            "Wood"

        Fruit ->
            "Fruit"


{-| Convert a String into a Natural

Returns Nothing if the string is not valid.

    fromString : String -> Maybe Natural
    fromString arg =
        case arg of
            "Leaf" ->
                Just Leaf

            "Stone" ->
                Just Stone

            "Wood" ->
                Just Wood

            "Fruit" ->
                Just Fruit

            _ ->
                Nothing

-}
fromString : String -> Maybe Natural
fromString string =
    case string of
        "Leaf" ->
            Just Leaf

        "Stone" ->
            Just Stone

        "Wood" ->
            Just Wood

        "Fruit" ->
            Just Fruit

        _ ->
            Nothing



-- Generated with [Elm-Pen](https://orasund.github.io/elm-pen) Version 0.0.6
