module Gen.Enum.Face exposing (..)

{-| Module generated by [Elm-Pen](https://orasund.github.io/elm-pen).

This module contains the Face Enum.

    type Face
        = Jack
        | Queen
        | King
        | Ace


# Basics

@docs Face, asList, first, next, prev, last


# Converters

@docs toInt, fromInt, toString, fromString

-}

import Array exposing (Array)



-- This is a generated file. DO NOT CHANGE ANYTHING IN HERE.
-------------------------------------------------------------------------------
-- BASICS
-------------------------------------------------------------------------------


{-| Face type.
-}
type Face
    = Jack
    | Queen
    | King
    | Ace


{-| Lists all possible values of Face

    asList : List Face
    asList =
        [ Jack
        , Queen
        , King
        , Ace
        ]

-}
asList : List Face
asList =
    [ Jack
    , Queen
    , King
    , Ace
    ]


{-| Get the first constructor of the Face

    first : Face
    first =
        Jack

-}
first : Face
first =
    Jack


{-| Get the next Face.

Returns Nothing if its the last

-}
next : Face -> Maybe Face
next face =
    face
        |> toInt
        |> (+) 1
        |> fromInt


{-| Get the next Face.

Returns Nothing if its the first

-}
prev : Face -> Maybe Face
prev face =
    face
        |> toInt
        |> (+) -1
        |> fromInt


{-| Get the last constructor of the Face

    last : Face
    last =
        Ace

-}
last : Face
last =
    Ace



-------------------------------------------------------------------------------
-- CONVERTERS
-------------------------------------------------------------------------------


{-| Convert `Face` into `Int`.

    toInt : Face -> Int
    toInt arg =
        case arg of
            Jack ->
                0

            Queen ->
                1

            King ->
                2

            Ace ->
                3

If you need to convert all values of Face into ints, use `asList` instead.

    asList |> List.indexedMap (\i _ -> i)
        --> asList |> List.map toInt

-}
toInt : Face -> Int
toInt face =
    case face of
        Jack ->
            0

        Queen ->
            1

        King ->
            2

        Ace ->
            3


{-| Convert `Int` into `Face`

Returns `Nothing` if the values is out of bounds.

    fromInt : Int -> Maybe Face
    fromInt int =
        case int of
            0 ->
                Just Jack

            1 ->
                Just Queen

            2 ->
                Just King

            3 ->
                Just Ace

            _ ->
                Nothing

-}
fromInt : Int -> Maybe Face
fromInt int =
    case int of
        0 ->
            Just Jack

        1 ->
            Just Queen

        2 ->
            Just King

        3 ->
            Just Ace

        _ ->
            Nothing


{-| Convert Face into String

    toString : Face -> String
    toString arg =
        case arg of
            Jack ->
                "Jack"

            Queen ->
                "Queen"

            King ->
                "King"

            Ace ->
                "Ace"

-}
toString : Face -> String
toString face =
    case face of
        Jack ->
            "Jack"

        Queen ->
            "Queen"

        King ->
            "King"

        Ace ->
            "Ace"


{-| Convert a String into a Face

Returns Nothing if the string is not valid.

    fromString : String -> Maybe Face
    fromString arg =
        case arg of
            "Jack" ->
                Just Jack

            "Queen" ->
                Just Queen

            "King" ->
                Just King

            "Ace" ->
                Just Ace

            _ ->
                Nothing

-}
fromString : String -> Maybe Face
fromString string =
    case string of
        "Jack" ->
            Just Jack

        "Queen" ->
            Just Queen

        "King" ->
            Just King

        "Ace" ->
            Just Ace

        _ ->
            Nothing



-- Generated with [Elm-Pen](https://orasund.github.io/elm-pen) Version 0.0.5
